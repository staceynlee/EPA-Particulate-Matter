xlab('Price per Carat') +
ylab('Frequency')
by(diamonds$price, diamonds$color, summary)
qplot(x = price, y = color, data = diamonds,
geom = 'boxplot') + coord_cartesian()
qplot(x = price, y = color, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 9000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 7000))
qplot(x = color, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 7500))
qplot(x = cut, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
qplot(x = clarity, y = price, data = diamonds,
geom = 'boxplot') + coord_cartesian(ylim = c(0, 8000))
by(diamonds$price, diamonds$color, summary)
qplot(x = color, y = price_per_carat, data = diamonds, geom = "boxplot") +
coord_cartesian(ylim = c(0,6000))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.3))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
qplot(x = carat,
data = diamonds,
binwidth =0.1,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
qplot(x = carat,
data = diamonds,
binwidth =0.01,
geom = 'freqpoly') +
scale_x_continuous(lim = c(0,3), breaks = seq(0,3,0.1))
#Load the data and libraries
library(ggplot2)
data("diamonds")
ggplot(aes(x = price, y = x), data = diamonds)
head(diamonds)
ggplot(aes(x = price, y = x), data = diamonds) + geom_point()
ggplot(aes(x = price, y = y), data = diamonds) + geom_point()
ggplot(aes(x = price, y = z), data = diamonds) + geom_point()
ggplot(aes(x = x, y = price), data = diamonds) + geom_point()
ggplot(aes(x = x, y = price), data = diamonds) + geom_point() +
labs(title = "Diamond Price vs. Length", x = "Length of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = x, y = price), data = diamonds) + geom_point(alpha = 1/20) +
labs(title = "Diamond Price vs. Length", x = "Length of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = x, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(3,9) +
labs(title = "Diamond Price vs. Length", x = "Length of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = x, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(3.5,9.5) +
labs(title = "Diamond Price vs. Length", x = "Length of diamond (mm)",
y = "Price of diamond (USD)")
head(diamonds)
ggplot(aes(x = y, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(3.5,9.5) +
labs(title = "Diamond Price vs. Length", x = "Width of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = y, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(3.5,10) +
labs(title = "Diamond Price vs. Length", x = "Width of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = y, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "blue") +
xlim(3.5,10) +
labs(title = "Diamond Price vs. Length", x = "Width of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(3.5,10) +
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(3,7.5) +
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(1,7.5) +
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(1,7.5) + ylim(0, 25000)
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(1,7.5) + ylim(0, 25000) +
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
ggplot(aes(x = z, y = price), data = diamonds) + geom_point(alpha = 1/20, color = "red") +
xlim(1,7.5) +
labs(title = "Diamond Price vs. Length", x = "Height of diamond (mm)",
y = "Price of diamond (USD)")
?cor
cor(diamonds, x, price)
cor(diamonds$x, diamonds$price)
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/20)
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point()
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/100) +
scale_x_continuous(breaks = 2) +
labs(title = "Diamond Price vs. Depth", x = "Depth (%)",
y = "Price of diamond (USD)")
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/100, color = "green") +
scale_x_continuous(breaks = 0, 100, 2) +
labs(title = "Diamond Price vs. Depth", x = "Depth (%)",
y = "Price of diamond (USD)")
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/100, color = "green") +
scale_x_continuous(breaks = seq(0, 100, 2)) +
labs(title = "Diamond Price vs. Depth", x = "Depth (%)",
y = "Price of diamond (USD)")
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/100, color = "hunter green") +
scale_x_continuous(breaks = seq(0, 100, 2)) +
labs(title = "Diamond Price vs. Depth", x = "Depth (%)",
y = "Price of diamond (USD)")
ggplot(aes(x = depth, y = price), data = diamonds) + geom_point(alpha = 1/100, color = "green4") +
scale_x_continuous(breaks = seq(0, 100, 2)) +
labs(title = "Diamond Price vs. Depth", x = "Depth (%)",
y = "Price of diamond (USD)")
cor(diamonds$depth, diamonds$price)
# Load the data and libraries
library(ggplot2)
library(dplyr)
library(tidyr)
data("diamonds")
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99)) +
labs(title = "Diamond Price vs. Carat", x = "Carat",
y = "Price of diamond (USD)")
ggplot(aes(x = carat, y = price), data = diamonds) + geom_point(alpha = 1/50) +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99)) +
labs(title = "Diamond Price vs. Carat", x = "Carat",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds) + geom_point(alpha = 1/20) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds) + geom_point(alpha = 1/20) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds) + geom_point(alpha = 1/50) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds) + geom_point(alpha = 1/50, color = "pink") +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds) + geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
cor(diamonds$x*y*z*, diamonds$price)
cor(diamonds$(x*y*z), diamonds$price)
cor(diamonds$x*y*z, diamonds$price)
diamonds_volume <- diamonds$x * diamonds$y * diamonds$z)
diamonds_volume <- diamonds$x * diamonds$y * diamonds$z
cor(diamonds$diamonds_volume, diamonds$price)
head(diamonds)
diamonds$diamonds_volume <- diamonds$x * diamonds$y * diamonds$z
head(diamonds)
head(diamonds)
cor(diamonds$diamonds_volume, diamonds$price)
ggplot(aes(x = x*y*z, y = price), data = subset(diamonds$diamond_voume >= 800 & diamonds$diamond_volume != 0)) + geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
?subset
ggplot(aes(x = x*y*z, y = price), data = diamonds[diamonds$diamond_voume >= 800 & diamonds$diamond_volume != 0]) + geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = x*y*z, y = price), data = diamonds[diamonds$diamond_voume < 800 & diamonds$diamond_volume > 0]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamond_volume, y = price), data = diamonds[diamonds$diamond_voume > 0 & diamonds$diamond_volume < 800]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamond_volume, y = price), data = diamonds) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
View(diamonds)
ggplot(aes(x = diamonds_volume, y = price), data = diamonds) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamonds_volume, y = price), data = diamonds[diamonds$diamond_voume > 0 & diamonds$diamond_volume < 800]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamonds_volume, y = price), data = diamonds[diamonds$diamonds_voume > 0 & diamonds$diamonds_volume < 800]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamonds_volume, y = price), data = diamonds[diamonds$diamonds_voume > 0]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamonds_volume, y = price), data = diamonds[diamonds$diamonds_volume < 800]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
ggplot(aes(x = diamonds_volume, y = price), data = diamonds[diamonds$diamonds_volume < 800 & diamonds$diamonds_volume > 0]) +
geom_point(alpha = 1/30) +
xlim(0, 600) +
labs(title = "Diamond Price vs. Volume", x = "Diamond Volume (mm^3)",
y = "Price of diamond (USD)")
# Load libraries and data
library(haven)
# Import SPSS data from the URL: work
work <- read_spss("http://assets.datacamp.com/course/importing_data_into_r/employee.sav")
# Display the summary of work$GENDER and work$JOBCAT
summary(work$GENDER)
summary(work$JOBCAT)
# Copy work to work2
work2 <- work
# Convert the variables GENDER and JOBCAT in work2 to factors
work2$GENDER <- as_factor(work2$GENDER)
work2$JOBCAT <- as_factor(work2$JOBCAT)
# Display the summary of work2$GENDER and work2$JOBCAT
summary(work2$GENDER)
summary(work2$JOBCAT)
# Load libraries and data
library(haven)
install.packages("haven")
# Load libraries and data
library(haven)
# Import SPSS data from the URL: work
work <- read_spss("http://assets.datacamp.com/course/importing_data_into_r/employee.sav")
# Display the summary of work$GENDER and work$JOBCAT
summary(work$GENDER)
summary(work$JOBCAT)
# Copy work to work2
work2 <- work
# Convert the variables GENDER and JOBCAT in work2 to factors
work2$GENDER <- as_factor(work2$GENDER)
work2$JOBCAT <- as_factor(work2$JOBCAT)
# Display the summary of work2$GENDER and work2$JOBCAT
summary(work2$GENDER)
summary(work2$JOBCAT)
View(work2)
View(work2)
library(dplyr)
work2 <- arrange(work2, JOBCAT)
View(work2)
ggplot(aes(JOBCAT), data = work2) + geom_hist()
library(ggplot2)
ggplot(aes(JOBCAT), data = work2) + geom_hist()
ggplot(aes(JOBCAT), data = work2) + geom_histogram()
ggplot(aes(JOBCAT), data = work2) + geom_bar()
work2 <- !is.na(work2)
ggplot(aes(JOBCAT), data = work2) + geom_bar()
View(work2)
work <- read_spss("http://assets.datacamp.com/course/importing_data_into_r/employee.sav")
# Display the summary of work$GENDER and work$JOBCAT
summary(work$GENDER)
summary(work$JOBCAT)
# Copy work to work2
work2 <- work
# Convert the variables GENDER and JOBCAT in work2 to factors
work2$GENDER <- as_factor(work2$GENDER)
work2$JOBCAT <- as_factor(work2$JOBCAT)
# Display the summary of work2$GENDER and work2$JOBCAT
summary(work2$GENDER)
summary(work2$JOBCAT)
# Arrange by job category
work2 <- arrange(work2, JOBCAT)
# Remove NAs
work2 <- na.omit(work2)
ggplot(aes(JOBCAT), data = work2) + geom_bar()
ggplot(aes(JOBCAT), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
View(work2)
ggplot(aes(x = JOBCAT, y = SALARY), data = work2) + geom_point()
ggplot(aes(x = JOBCAT, y = SALARY)), data = work2) + geom_point()
ggplot(aes(x = JOBCAT, y = SALARY), data = work2) + geom_point()
ggplot(aes(x = ID, y = SALARY), data = work2) + geom_point()
ggplot(aes(x = JOBCAT, y = MINORITY), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(JOBCAT), data = work2, color = MINORITY) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(JOBCAT), data = work2) + geom_bar(color = MINORITY) +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(JOBCAT, color = MINORITY), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(JOBCAT), data = work2, fill = MINORITY) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(MINORITY), data = work2, fill = JOBCAT) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(aes(MINORITY), data = work2, fill = JOBCAT) + geom_histogram() +
labs(title = "Number of Jobs by Category", x = "Job Category", y = "Count")
ggplot(work2, aes(x = JOBCAT)) + geom_bar(aes(fill = MINORITY))
ggplot(work2, aes(x = JOBCAT)) + geom_bar(aes(fill = SALARY))
ggplot(work2, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT))
ggplot(work2, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT), stat="identity")
ggplot(work2, aes(x = SALARY)) + geom_bar(stat="identity", aes(fill = JOBCAT))
ggplot(work2, stat="identity", aes(x = SALARY)) + geom_bar(stat="identity", aes(fill = JOBCAT))
ggplot(work2, stat="identity", aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT))
ggplot(work2, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT))
ggplot(work2, aes(x = SALARY)) + geom_bar(stat="identity", width = 2, aes(fill = JOBCAT))
ggplot(work2, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT), stat="identity", width = 2)
ggplot(work2, stat="identity", width = 2, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT))
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) + geom_bar(aes(fill = JOBCAT))
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) +
geom_bar(aes(fill = JOBCAT)) + scale_x_discrete()
?scale_x_discrete
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) +
geom_bar(aes(fill = JOBCAT)) + scale_x_discrete(SALARY)
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) +
geom_bar(aes(fill = JOBCAT)) + scale_x_discrete("SALARY")
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) +
geom_bar(aes(fill = JOBCAT)) + scale_y_discrete()
ggplot(work2, stat="identity", width = 10, aes(x = SALARY)) +
geom_bar(aes(fill = JOBCAT)) + scale_y_continuous()
plot(work2$JOBCAT, work2$SALARY, xlab = "Job", ylab = "salary")
plot(work2$JOBCAT, work2$SALARY, xlab = "Job", ylab = "Salary")
plot(work2$JOBCAT, work2$SALARY)
ggplot(work2) + geom_histogram(aes(x = SALARY))
ggplot(work2) + geom_histogram(aes(x = SALARY), stat = "identity")
ggplot(work2) + geom_bar(aes(x = SALARY), stat = "identity")
ggplot(work2) + geom_bar(aes(x = SALARY))
ggplot(work2) + geom_bar(aes(x = SALARY), binwidth= 50)
ggplot(work2) + geom_bar(aes(x = SALARY), size = 10)
ggplot(work2) + geom_bar(aes(x = SALARY), stat = "identity")
ggplot(aes(GENDER), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(GENDER), data = work2) + geom_bar(fill = JOBCAT) +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(GENDER), data = work2) + geom_bar(stat = "identity") +
ggplot(aes(GENDER), data = work2) + geom_bar(stat = "identity") +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(GENDER), data = work2, fill = JOBCAT) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(GENDER, fill = JOBCAT), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(SALARY), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Gender", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar() +
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar() + xlim(0, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar() + xlim(10000, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar() + xlim(15000, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 20) + xlim(15000, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 200) + xlim(15000, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 150) + xlim(15000, 60000)
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 150) + xlim(15000, 60000) +
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 150, position="dodge") + xlim(15000, 60000) +
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
ggplot(aes(SALARY, fill = GENDER), data = work2) + geom_bar(width = 150, position="dodge") + xlim(15000, 60000) +
labs(title = "Number of Jobs by Category", x = "Salary", y = "Count")
?contect
?content
setwd("~/Desktop/GitHub/EPA-Particulate-Matter/exdata%2Fdata%2FNEI_data")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
head(NEI)
head(SCC)
?sample
head(NEI)
?aggregate
aggregateTotal <- aggregate(Emissions ~ year, NEI, sum)
View(aggregateTotal)
aggregateTotal <- aggregate(Emissions ~ year, NEI, sum)
View(aggregateTotal)
barplot(height = aggregateTotal$Emissions, names.arg=aggregateTotal$year,
xlab="Year", ylab=expression('total PM'[2.5]*' emission'),
main=expression('Total PM'[2.5]*' Emissions at Each Year'))
png('plot1.png')
barplot(height = aggregateTotal$Emissions, names.arg=aggregateTotal$year,
xlab="Year", ylab=expression('Total PM'[2.5]*' Emission'),
main=expression('Total PM'[2.5]*' Emissions at Each Year'))
dev.off()
subsetNEI  <- NEI[NEI$fips=="24510", ]
# Aggregate data by year
aggregateTotal <- aggregate(Emissions ~ year, NEI, sum)
# Plot
png('plot2.png')
barplot(height = aggregateTotal$Emissions, names.arg=aggregateTotal$year,
xlab="Year", ylab=expression('Total PM'[2.5]*' Emission'),
main=expression('Total PM'[2.5]*' Emissions at Each Year'))
dev.off()
library(ggplot2)
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
title('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
main('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions"))
View(aggregateTotal)
aggregateTotal <- aggregate(Emissions ~ year + type, subsetNEI, sum)
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
title('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
png('plot3.png')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
title('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
dev.off()
png('plot3.png')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
title('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
dev.off()
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
title('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
png('plot3.png')
ggplot(aggregateTotal, aes(year, Emissions, color = type)) + geom_line() +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions in Baltimore City, Maryland from 1999 to 2008')
dev.off()
View(aggregateTotal)
subsetCoal  <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE),]
merge <- merge(x=NEI, y=SCC.coal, by='SCC')
mergeSum <- aggregate(merge[, 'Emissions'], by=list(merge$year), sum)
colnames(mergeSum) <- c('Year', 'Emissions')
merge <- merge(x=NEI, y=SCC.coal, by='SCC')
merge <- merge(x=NEI, y=subsetCoal, by='SCC')
mergeSum <- aggregate(merge[, 'Emissions'], by=list(merge$year), sum)
colnames(mergeSum) <- c('Year', 'Emissions')
View(mergeSum)
ggplot(mergeSum, aes(factor(year), Emissions)) + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Coal from 1999 to 2008')
ggplot(mergeSum, aes(factor(Year), Emissions)) + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Coal from 1999 to 2008')
png('plot4.png')
ggplot(mergeSum, aes(factor(Year), Emissions)) + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Coal from 1999 to 2008')
dev.off()
subsetNEI <- NEI[NEI$fips=="24510" & NEI$type=="ON-ROAD",  ]
aggregateTotal <- aggregate(Emissions ~ year, subsetNEI, sum)
# Plot
png('plot5.png')
ggplot(aggregateTotal, aes(factor(Year), Emissions)) + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Motor Vehicles in Baltimore from 1999 to 2008')
dev.off()
png('plot5.png')
ggplot(aggregateTotal, aes(factor(year), Emissions)) + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Motor Vehicles in Baltimore from 1999 to 2008')
dev.off()
subsetNEI <- NEI[(NEI$fips=="24510"|NEI$fips=="06037") & NEI$type=="ON-ROAD",  ]
aggregateTotal <- aggregate(Emissions ~ year + fips, subsetNEI, sum)
aggregateTotal$fips[aggregateTotal$fips=="24510"] <- "Baltimore, MD"
aggregateTotal$fips[aggregateTotal$fips=="06037"] <- "Los Angeles, CA"
ggplot(aggregateTotal, aes(factor(year), Emissions)) + facet_grid(. ~ fips) +
geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Motor Vehicles from 1999 to 2008')
png('plot6.png')
ggplot(aggregateTotal, aes(factor(year), Emissions)) + facet_grid(. ~ fips) +
geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions By Motor Vehicles from 1999 to 2008')
dev.off()
